   <ul className={styles.SidebarMenuList}>
            {
              // eslint-disable-next-line array-callback-return
              menuItemsArrayState.map((item: any, index: number) => {
                if (currentMenuItem === index + 1) {
                  return (
                    <li key={index}>
                      <li
                        className={`${
                          currentMenuItem === index + 1
                            ? `ripple ${styles.selected_Menu_Item}`
                            : ""
                        } ${isMinified && styles.listItemMinified}`}
                        style={{ cursor: isMinified ? "default" : "pointer" }}
                        onClick={(e: any) => {
                          if (!isMinified) {
                            createRipple(e);
                            if (isMinified === false) {
                              setCurrentMenuItem(index + 1);
                              // navigate('/');
                              if (currentSubMenuSidebarOpenItem === index + 1) {
                                setCurrentSubMenuSidebarOpenItem(0);
                              } else {
                                setCurrentSubMenuSidebarOpenItem(index + 1);
                              }
                            }
                          }
                        }}
                        onMouseLeave={() => {
                          if (isMinified) {
                            // setCurrentMenuItem(0);
                            // setCurrentSubMenuSidebarOpenItem(0);
                          }
                        }}
                      >
                        <div
                          className={`d-flex ${
                            isMinified && styles.minifiedSidebarInsideContainer
                          }`}
                          role={"button"}
                          // Disable on click when is minified
                          onClick={(event) => {
                            event.preventDefault();
                          }}
                          onMouseEnter={() => {
                            if (isMinified) {
                              setCurrentMenuItem(index + 1);
                              //if (currentSubMenuSidebarOpenItem === (index + 1)) {
                              // setCurrentSubMenuSidebarOpenItem(0);
                              //}
                              //else {
                              setCurrentSubMenuSidebarOpenItem(index + 1);
                              //}
                            }
                          }}
                        >
                          <p
                            style={{
                              // border: ((currentSubMenuSidebarOpenItem === (index + 1)) && isMinified && i18n.language === 'ar') ? ("1px solid black") : ("1px solid red"),
                              marginRight:
                                currentSubMenuSidebarOpenItem === index + 1 &&
                                isMinified &&
                                i18n.language === "ar"
                                  ? 3
                                  : isMinified &&
                                    currentMenuItem === index + 1 &&
                                    i18n.language === "ar"
                                  ? 3
                                  : "initial",
                            }}
                          >
                            <span
                              dangerouslySetInnerHTML={{ __html: item.icon }}
                            />
                          </p>
                          <p className={styles.itemMenuListText}>
                            {currentLang === "ar" ? item.appName_Ar : item.text}
                          </p>
                        </div>
                      </li>
                      {currentSubMenuSidebarOpenItem === index + 1 && (
                        <ul
                          onMouseLeave={() => {
                            if (isMinified) {
                              // setCurrentMenuItem(0);
                              /// setCurrentSubMenuSidebarOpenItem(0);
                            }
                          }}
                          onMouseEnter={() => {
                            if (isMinified) {
                              setCurrentSubMenuSidebarOpenItem(index + 1);
                            }
                          }}
                          className={`${
                            isMinified
                              ? styles.SubMenuItemContainerMinifiedVersion
                              : styles.SubMenuItemContainer
                          }`}
                          style={{
                            overflowY: "scroll",
                            // border: "1px solid red",
                            borderBottom: "0.1px solid #e5e5e5",
                            height: "51vh",
                          }}
                        >
                          {sidebarList[index].subMenu.map(
                            (subItem: any, subIndex: number) => {
                              return (
                                <li
                                  key={subIndex}
                                  onClick={() => {
                                    // Navigate to the link
                                    navigate(subItem.formUrl);

                                    if (windowSize[0] <= 990) {
                                      setIsOpen(false);
                                    }

                                    // Set the current menu item
                                    if (isMinified) {
                                      // setCurrentMenuItem(0);
                                      setCurrentSubMenuSidebarOpenItem(0);
                                    }

                                    // Set the current selected sub menu item
                                    setCurrentSelectedSubMenu(subIndex);
                                  }}
                                  style={{
                                    borderTopLeftRadius:
                                      subIndex === 0 && isMinified ? 5 : 0,
                                    borderTopRightRadius:
                                      subIndex === 0 && isMinified ? 5 : 0,
                                    borderBottomLeftRadius:
                                      subIndex ===
                                        sidebarList[index].subMenu.length - 1 &&
                                      isMinified
                                        ? 5
                                        : 0,
                                    borderBottomRightRadius:
                                      subIndex ===
                                        sidebarList[index].subMenu.length - 1 &&
                                      isMinified
                                        ? 5
                                        : 0,
                                  }}
                                  className={`${
                                    isMinified &&
                                    styles.SubMenuItemContainerMinifiedVersionli
                                  } ${
                                    currentSelectedSubMenu === subIndex
                                      ? styles.selectedSubMenuItemContainerli
                                      : null
                                  }`}
                                >
                                  {!isMinified ? (
                                    <div
                                      style={{
                                        display: "flex",
                                      }}
                                    >
                                      {/* {subItem.icon} */}
                                      <p
                                        dangerouslySetInnerHTML={{
                                          __html: subItem.icon,
                                        }}
                                      />
                                      &nbsp; &nbsp; &nbsp;
                                      <p
                                        className={
                                          styles.textSidebarSubMenuList
                                        }
                                      >
                                        {currentLang === "ar"
                                          ? subItem.formName_Ar
                                          : subItem.text}
                                      </p>
                                    </div>
                                  ) : (
                                    <div className="d-flex">
                                      {/* <p>
                                                                                {subItem.icons[0].icon} */}
                                      {/* {subItem.icons.map((icon: any, iconIndex: number) => (
                                                                                    <React.Fragment key={iconIndex}>{icon.icon}</React.Fragment>
                                                                                ))} */}
                                      {/* </p> */}
                                      {/* <p dangerouslySetInnerHTML={{ __html: subItem.icon }} /> */}
                                      <p>
                                        <RxDot style={{ marginLeft: 2 }} />
                                      </p>
                                      &nbsp; &nbsp; &nbsp;
                                      <p
                                        className={
                                          styles.textSidebarSubMenuList
                                        }
                                      >
                                        {currentLang === "ar"
                                          ? subItem.formName_Ar
                                          : subItem.text}
                                      </p>
                                    </div>
                                  )}
                                </li>
                              );
                            }
                          )}
                        </ul>
                      )}
                    </li>
                  );
                }
              })
            }
          </ul>